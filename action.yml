# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
name: 'ncnn installer'
description: 'Build and install ncnn'
inputs:
  ncnn_tag:
    description: 'The tag(release version) of ncnn'
    required: true
    default: '20220420' # or master
runs:
  using: "composite"
  steps:
    - name: clone ncnn
      run: |
        git clone https://github.com/tencent/ncnn
        cd ncnn
        git checkout ${{ inputs.ncnn_tag }}
      shell: bash

    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
    - name: Set env
      run: echo "ncnn_tag=${{ inputs.ncnn_tag }}" >> $GITHUB_ENV
      shell: bash
    - name: Test env
      run: echo $ncnn_tag
      shell: bash

    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: configure ncnn
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake . -B build -T v143,host=x64 -A x64 -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/artifacts/ncnn/${ncnn_tag}/windows-x64" -DNCNN_BUILD_BENCHMARK=OFF -DNCNN_RUNTIME_CPU=OFF -DNCNN_OPENMP=OFF -DNCNN_VULKAN=OFF
        elif [ "$RUNNER_OS" == "Linux" ]; then
          cmake . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts/ncnn/${ncnn_tag}/linux-x64 -DNCNN_BUILD_BENCHMARK=OFF -DNCNN_RUNTIME_CPU=OFF -DNCNN_OPENMP=OFF -DNCNN_VULKAN=OFF
        elif [ "$RUNNER_OS" == "macOS" ]; then
          cmake . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts/ncnn/${ncnn_tag}/mac-x64 -DNCNN_BUILD_BENCHMARK=OFF -DNCNN_RUNTIME_CPU=OFF -DNCNN_OPENMP=OFF -DNCNN_VULKAN=OFF
        fi
      working-directory: ncnn
      shell: bash

    - name: build ncnn
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake --build . --config Release
        else
          cmake --build .
        fi
      working-directory: ncnn/build
      shell: bash

    - name: install ncnn
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake --build . --config Release --target install
        else
          cmake --build . --target install
        fi
      working-directory: ncnn/build
      shell: bash

    - name: clean up
      run: rm -R ncnn
      shell: bash

branding:
  icon: activity
  color: gray-dark
